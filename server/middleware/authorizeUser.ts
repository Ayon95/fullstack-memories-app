/* This middleware will be responsible for checking whether or not
a request to a protected resource contains the token needed to authorize the user.
Only an authorized user can access protected resources.
The server will expect the request to have an Authorization header containing the token.
The Authorization header's value is expected to be in the following format:
Bearer eyJhbGciOiJIUzI1NiIsInR5c2VybmFtZSI6Im1sdXVra2FpIiwiaW

Example:
- Suppose a user wants to create a post
- the user fills out a form and submits it
- the server needs to verify that the user has permission to perform that action
- this middleware will perform that check and will either authorize or deny the user
- the server will only process the request if the user is authorized

- submit form (send POST request) -> authorizeUser next() -> controller for creating new post
*/

import { NextFunction, Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import config from '../utils/config';
import { TokenPayload } from '../utils/types';

function authorizeUser(request: Request, response: Response, next: NextFunction) {
	try {
		// getting the value of the Authorization header
		const authHeaderValue = request.get('Authorization');
		// checking if the header value exists and if it is using the Bearer scheme
		// if there is no Authorization header value, then that means there's no token
		if (!authHeaderValue || !authHeaderValue.toLowerCase().startsWith('bearer')) {
			return response.status(403).json({
				errorMessage: 'Authorization header is missing, or it does not have a Bearer token',
			});
		}
		// extract the token from the auth header value
		const token = authHeaderValue.split(' ')[1];
		// checking if the token is our own or one generated by Google Auth (token length > 500)
		const isCustomToken = token.length <= 500;

		let decodedPayload: jwt.JwtPayload | TokenPayload;

		// verifying the token and getting its decoded payload if the token is our own
		if (isCustomToken) {
			// if the token is missing or is invalid, then a JsonWebTokenError will be thrown
			// if the token is expired, then a TokenExpiredError will be thrown
			decodedPayload = jwt.verify(token, config.JWT_SECRET) as TokenPayload;
			// storing the user id in the request object by creating a 'userId' property on it
			request.userId = decodedPayload.id;
		}

		// if the token is from Google Auth
		if (!isCustomToken) {
			// we won't need to verify the token with the secret in this case
			decodedPayload = jwt.decode(token) as jwt.JwtPayload;
			// sub is a unique id string that differentiates every Google user
			request.userId = decodedPayload.sub!;
		}

		// execute the next middleware
		next();
	} catch (error) {
		console.error(error);
	}
}

export default authorizeUser;
